# version(1) - Translated by https://github.com/sjy5386
# Welcome to Clearlag's language file! Here you can modify the various strings ClearLag uses to suit your language, or preference
# -- NOTE: This is the format: '<key>({replaceables}...):<message>'
# -- NOTE: The replaceables are replaced depending on order, not the actual key name. So you may customize the key names too!
# -- NOTE: The { ... } symbols represent a message block. This is applicable anywhere you want... Do not include any characters with {, or }

####----> Commands -->
command.error.wrongUsage({usage},{name})=&c잘못된 사용: &8/&7lagg {name} {usage}
command.error.noPermission({name})=&8/&7lagg {name}&c을(를) 사용하기 위한 권한이 없습니다
command.error.onlyForPlayer()=&c이 명령어는 플레이어만 사용할 수 있습니다!

##]-> /lagg
command.lagg.nopermission()=&c이 명령어를 사용하기 위한 권한이 없습니다!
command.lagg.header()=&3-------------(&b&lClearlag 명령어&3)-------------
command.lagg.footer()=&3----------------------------------------------------
command.lagg.helpline({name},{desc})= &4- &8/&3lagg &b{name} &f -  {desc}

##]-> /lagg admin
command.admin.name()=admin
command.admin.desc()=(ClearLag의 모듈을 제어합니다)
command.admin.usage()=
command.admin.enabledModules({moduleList})=&a다시 로드 가능한 모듈: &7{moduleList}
command.admin.noReloadableFields({module})={module}&c에 다시 로드 가능한 필드가 없습니다!
command.admin.notEnabled({module})=&c이 모듈은 활성화되어 있지 않습니다!
command.admin.reload({module})=&a{module} 모듈이 다시 로드되었습니다!
command.admin.failedReload({module})=&c{module} 모듈을 다시 로드하는데 실패했습니다
command.admin.invalidModule({argument})=&c잘못된 모듈: {argument}
command.admin.enabledModules({modules})=&a사용 가능한 모듈: &7{modules}
command.admin.stoppedModule({module})=&a{module} 모듈이 &c중지&a되었습니다!
command.admin.startableModules({modules})=&a시작 가능한 모듈: &7{modules}
command.admin.alreadyEnabled({module})=&c이 모듈은 이미 활성화되어 있습니다!
command.admin.enabled({module})=&a{module} 모듈이 활성화되었습니다!
command.admin.moduleStatus({listeners},{commands},{tasks},{modules})={
&3=--------------[&6-&3] &b&l모듈 상태 &3[&6-&3]----------------=
              &8[&7회색 = 비활성화됨&8]   &8[&a초록색 = 활성화됨&8]
&6리스너: {commands}
&6명령: {commands}
&6작업: {tasks}
&6모듈: {modules}
}
command.admin.help()={
&3=-------------[&6-&3] &b&l모듈 명령어 &3[&6-&3]---------------=
&4  - &3/lagg admin &creload &b<module>
&4  - &3/lagg admin &cstop &b<module>
&4  - &3/lagg admin &cstart &b<module>
&4  - &3/lagg admin &clist
&3-----------------------------------------------------
}

##]-> /lagg area
command.area.name()=area
command.area.usage()=<radius>
command.area.desc()=(주변에 있는 개체를 지웁니다)
command.area.error({arg})=&4유효하지 않은 인수 지정됨&8: &c{arg}
command.area.message({removed},{radius})=&6[&aClearLag&6] &3{radius} &b반경 안에 있는 &3{removed} &b개체가 제거되었습니다!

##]-> /lagg checkchunk
command.checkchunk.name()=checkchunk
command.checkchunk.usage()=
command.checkchunk.desc()=(청크의 개체를 표시합니다)
command.checkchunk.header()=&4*&3&m                            &8(&a&l청크 정보&8)&3&m                              &4*
command.checkchunk.tilelist()=&3 타일 개체&8:
command.checkchunk.entitylist()=&3 개체&8:
command.checkchunk.line({count},{type})=   &8- &ax{count} &7{type}
command.checkchunk.footer()=&4*&3&m                                                                             &4*

##]-> /lagg check
command.check.name()=check
command.check.usage()=[world1, world2...]
command.check.desc()=(세계에 있는 개체 수를 셉니다)
command.check.invalidworld({arg})=&4유효하지 않은 세계 지정됨&8: {arg}
command.check.header()=&4*&3&m                          &8(&a&l서버 상태&8)&3&m                           &4*
command.check.printed({removed1},{mobs},{animals},{players},{chunks},{activehoppers},{inactivehoppers},{spawners},{uptime},{tps},{usedmemory},{maxmemory},{freememory})={
&3   땅에 있는 아이템: &b{removed1}
&3   살아 있는 몹: &b{mobs}
&3   살아 있는 친화적인 몹: &b{animals}
&3   접속 중인 플레이어: &b{players}
&3   청크 로드됨: &b{chunks}
&3   활성 호퍼: &b{activehoppers}
&3   유휴 호퍼: &b{inactivehoppers}
&3   활성 몹 스포너: &b{spawners}
&3   가동 시간: &b{uptime}
&3   현재 TPS: &b{tps}
&3   RAM 사용량: &b{usedmemory}&7/&b{maxmemory} &7MB
&3   여유 메모리: &b{freememory} &7MB
}
command.check.footer()=&4*&3&m                                                                             &4*

##]-> /lagg chunk
command.chunk.name()=chunk
command.chunk.usage()=[list-size]
command.chunk.desc()=(지연이 발생하는 청크를 찾습니다)
command.chunk.header()=&7&m                           &7( &b가장 큰 청크 &7)&m                           "
command.chunk.print({order},{world},{x},{z},{count})=&4{order}&7) &3World: &b{world}  &3x: &b{x}  &3z: &b{z}  &3Entities: &b{count}

##]-> /lagg clear
command.clear.name()=clear
command.clear.usage()=
command.clear.desc()=(세계에 있는 개체를 지웁니다)
command.clear.message({count})=&6[&aClearLag&6] &3{count}&b &a&b개체를 제거했습니다!

##]-> /lagg gc
command.gc.name()=gc
command.gc.usage()=
command.gc.desc()=(가비지 콜렉터를 요청합니다)
command.gc.message()=&6[&aClearLag&6] &a&b지금 즉시 가비지 콜렉션을 요청합니다! &7(경고: Java 가상 머신은 자동으로 메모리를 효율적으로 비웁니다. 디버그하거나 큰 힙을 강제로 비울 때만 이 명령어를 사용하십시오.)

##]-> /lagg halt
command.halt.name()=halt
command.halt.usage()=[on/off]
command.halt.desc()=(대부분의 서버 활동을 중지합니다)
command.halt.halted()=&6[&aClearLag&6] &a&b서버 활동이 &c중지&b되었습니다!
command.halt.unhalted()=&6[&aClearLag&6] &a&a서버 활동이 더 이상 중지되지 않습니다!

##]-> /lagg killmobs
command.killmobs.name()=killmobs
command.killmobs.usage()=
command.killmobs.desc()=(세계에서 몹을 제거합니다)
command.killmobs.message({count})=&6[&aClearLag&6] &b몹 &a&3{count}&b마리가 제거되었습니다!

##]-> /lagg profile
command.profile.name()=profile
command.profile.usage()=<sample-seconds> <sample-type>
command.profile.desc()=(지연을 일으키는 이벤트를 프로파일합니다)
command.profile.invalidtime({arg})=&4유효하지 않은 샘플 시간 지정됨&8: &c{arg}
command.profile.invalidprofiler({arg},{profilers})={
&4유효하지 않은 프로파일러 지정됨&8: &c{arg}
&c유효한 프로파일러&8: &7{profilers}
}
command.profile.nosamples()=&c샘플 시간 동안 샘플이 기록되지 않음
command.profile.header()=&7&m                           &7( &b청크 샘플 &7)&m
command.profile.line({listing},{world},{x},{z},{samples})=&4{listing}&7) &3세계: &b{world}&7, &3x: &b{x}&7, &3z: &b{z}   &3샘플 크기: &b{samples}
command.profile.started({time})=&6[&aClearLag&6] &a프로파일러 시작됨, &7{time}&a초 동안 실행

##]-> /lagg reload
command.reload.name()=reload
command.reload.usage()=
command.reload.desc()=(ClearLag을 다시 로드합니다)
command.reload.begin()=&6[&aClearLag&6] &b모듈을 다시 로드하려고 시도합니다...
command.reload.successful()=&6[&aClearLag&6] &b모듈이 다시 로드되었습니다!

##]-> /lagg samplememory
command.samplememory.name()=samplememory
command.samplememory.usage()=<sample-seconds>
command.samplememory.desc()=(샘플 메모리/GC 사용량)
command.samplememory.invalidinteger({arg})=&4유효하지 않은 정수 지정됨&8: &c{arg}
command.samplememory.begin({time})=&7{time}&a초 동안 메모리 샘플러 실행
command.samplememory.header()=&4*&3&m                       &8(&a&l메모리 틱 통계&8)&3&m                        &4*
command.samplememory.memory({high},{average})={
&a메모리 (MB 단위):
&3   틱당 최대 메모리 사용량: &b{high}
&3   틱당 평균 메모리 사용량: &b{average}
}
command.samplememory.gc({total},{highest},{lowest},{averagetime},{averageticks})={
&a가비지 콜렉터 (틱 기반, 밀리초 단위):
&3   총 GC 콜렉션 (틱 단위): &b{total}
&3   최고 가비지 콜렉터 시간: &b{highest}
&3   최저 가비지 콜렉터 시간: &b{lowest}
&3   평균 가비지 콜렉터 시간: &b{averagetime}
&3   컬렉션 간 평균 틱: &b{averageticks}
}
command.samplememory.notenoughtime()=&c가비지 콜렉터 결과를 얻기 위한 샘플 시간이 충분하지 않습니다

##]-> /lagg sampleticks
command.sampleticks.name()=sampleticks
command.sampleticks.usage()=[ticksToSample] [raw/stats]
command.sampleticks.desc()=(서버의 틱을 샘플링합니다)
command.sampleticks.start({threadname},{time})=&7{threadname} &a스레드에서 &7{time}&a틱에 대한 전체 틱 샘플링을 시작했습니다 &7(예상치, 100% 정확하지 않음)
command.sampleticks.rawheader()=&c원시 틱 타이밍: &7(정상적인 틱은 0-50ms입니다)
command.sampleticks.rawprint({time})=&8 - {time}
command.sampleticks.print({large},{small},{average},{spikes})={
&a틱 통계: &7(정상적인 틱은 0-50ms입니다.)
&3   최대 틱: {large}
&3   최소 틱: {small}
&3   평균 틱: {average}
&3   급등: {spikes}
}

##]-> /lagg tpchunk
command.tpchunk.name()=tpchunk
command.tpchunk.usage()=<x> <z> [world]
command.tpchunk.desc()=(청크에 순간이동합니다)
command.tpchunk.begin()=&6[&aClearLag&6] &b모듈을 다시 로드하려고 시도합니다...
command.tpchunk.successful()=&6[&aClearLag&6] &b모듈이 다시 로드되었습니다!
command.tpchunk.invalidinteger({arg})=&4유효하지 않음 정수 지정됨&8: &c{arg}
command.tpchunk.invalidworld({arg})=&4세계가 존재하지 않음&8: &c{arg}
command.tpchunk.teleported({x},{z})=&6[&aClearLag&6] &b청크에 순간이동됨: &3{x}&7, &3{z}

##]-> /lagg tps
command.tps.name()=tps
command.tps.usage()=
command.tps.desc()=(서버의 평균 틱 레이트를 표시합니다)
command.tps.print({tps})=&6[&aClearLag&6] &a{tps}

##]-> /lagg unloadchunks
command.unloadchunks.name()=unloadchunks
command.unloadchunks.usage()=
command.unloadchunks.desc()=(사용하지 않는 청크를 언로드합니다)
command.unloadchunks.print({chunks})=&6[&aClearLag&6] &3{chunks} &b청크가 언로드되었습니다!

##]-> /lagg memory
command.memory.name()=memory
command.memory.usage()=[tick-rate]
command.memory.desc()=(View Heap info)
command.memory.message()=&3Started JVM heap sampling on the listed memory pools
command.memory.invalidinteger({arg})=&4Invalid poll-rate specified&8: &c{arg}

##]-> /lagg performance
command.performance.name()=performance
command.performance.usage()=[tick-rate]
command.performance.desc()=(View Server Performance)
command.performance.message()=&3Started thread sampling (More &1sleep&3 is better!)
command.performance.invalidinteger({arg})=&4Invalid poll-rate specified&8: &c{arg}
